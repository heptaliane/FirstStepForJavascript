{
  "body": [
    "# Javascriptの変数の種類  ",
    "Javascriptでは以下のものを変数として扱うことができます。  ",
    "* 真偽値  ",
    "* 文字(列)  ",
    "* 数字  ",
    "* Object (dictに対応)  ",
    "* Array (listに対応)  ",
    "* **関数**  ",
    "* null",
    "* **undefined**  ",
    "Javascriptは型なし言語なので、変数に異なる種類の変数を代入することも",
    "可能です。  ",
    "## 真偽値 (boolean)",
    "booleanは`true`, `false`の2つからなる型です。  ",
    "bit反転以外の計算操作をboolean型変数に対し行った場合、",
    "`true`は`1`, `false`は`0`として演算が行われます。",
    "(**が、やめましょう！**)  ",
    "",
    "## 文字列 (string)",
    "stringは`'`または`\"`で囲われた文字列からなる変数です。  ",
    "Cなどとは異なり、シングルクォート/ダブルクォートによる区別はありません",
    "が、プロジェクト内では**どちらか一方に統一する**ことが望ましいです。  ",
    "また、`\\``で囲った文字列もstring型の変数となります。  ",
    "バッククォートを用いた場合、",
    "文字列内に他の変数を展開することができます。  ",
    "例えば`'9'`が格納された`x`という変数があったとき、",
    "`\\`value is ${x}\\``とすると`'value is 9'`という文字列が生成されます。  ",
    "同様の結果は`'value is ' + x`によっても得ることができますが、",
    "プロジェクト内では**どちらか一方の方法に統一する**ことが望ましいです。  ",
    "また、`str[0]`のようなインデックスによって特定の文字にアクセスする",
    "ことができますが、`str[0] = 'a';`などのようにして変更することは",
    "できません。  ",
    "string型変数のプロパティ",
    "の詳細についてはAPIを参照してください。  ",
    "```javascript:string_example.js",
    "var s1 = \"This is string\" // 'This is string'",
    "var s2 = 'This is string' // 'This is string'",
    "console.log(s1 === s2); // true",
    "var s3 = \\`str = ${s1}\\`; // 'str = This is string'",
    "var s4 = 'str = ' + s1; // 'str = This is string'",
    "console.log(s3 === s4); // true",
    "",
    "console.log(s1[0]); // T",
    "s1[0] = 'a';",
    "console.log(s1); // 'This is string'",
    "```",
    "この例における`var`は変数宣言においてのスコープを示すもので、",
    "詳しくは次節で説明します。  ",
    "",
    "## 数字 (number)",
    "`0`, `0.4`, `1.0e4`, `NaN`, `Infinity`などが`number`に当たります。  ",
    "Javascriptの`number`はすべて**8Byteの浮動少数**です。  ",
    "また`NaN`は`1 * 'str'`などの無効な演算を行ったときの結果",
    "(Not a Number)として得られるnumber型の変数で、",
    "`NaN`を含めた**すべての変数と一致せず**、",
    "関数`isNaN()`によってのみ判別可能です。  ",
    "一方`Infinity`はおよそ`1.8e308`よりも大きな値を表します。  ",
    "```javascript:number_example.js",
    "var x = 1 - 1.5; // -0.5",
    "var y = 1 / 2; // 0.5",
    "var z = 1 / 0; // Infinity",
    "var w = 1 + 'string'; // '1string'",
    "var v = 1 / 'string'; // NaN",
    "var u = '%03d' % 1; // NaN",
    "```",
    "演算子などは別途APIを参照してください。  ",
    "",
    "## Object  ",
    "Objectは`{a: 1, b: 'b'}`のような形で表された",
    "keyとvalueの組である、dictに対応します。  ",
    "Objectのvalueはどのような型であったも問題ありません。  ",
    "keyは`{a: 1}`のようにラベルで宣言する方法と、",
    "`{'a': 1}`のように文字列で宣言する方法を用いることができます。  ",
    "Objectの要素へのアクセスはkeyをインデックスとして用いる方法と、",
    "keyをプロパティとして用いる方法があります。  ",
    "例として`{a: 1, b: 'b'}`を値として持つ変数`d`に対し、",
    "key`a`に対応するvalueを取得する場合を考えると、",
    "前者は`d['a']`, 後者は`d.a`のようにしてアクセスします。  ",
    "アクセスしたい要素が*動的に変化しない場合*、",
    "`d.a`のように**プロパティとしてアクセスすることが推奨されます**。  ",
    "一方、文字列が格納された変数`x`として対応するvalueを取得したい",
    "場合は`d[x]`のように**インデックスでアクセスする必要があります**。  ",
    "また、オブジェクトの宣言に変数を用いたい場合も、",
    "`{[x]: 0}`のようにインデックスでkeyを指定する必要があります。  ",
    "```javascript:object_example1.js",
    "var obj1 = {a: 1}; // {a: 1}",
    "var obj2 = {'a': 1}; // {a: 1}",
    "",
    "console.log(obj1['a']); // 1",
    "console.log(obj1.a); // 1",
    "",
    "obj1['a'] = -1; // {a: -1}",
    "obj1.a = 0; // {a: 0}",
    "",
    "var x = 'b';",
    "var obj3 = {[x]: true, x: false} // {b: true, x: false}",
    "console.log(obj3[x]); // true",
    "console.log(obj3.x); // false",
    "```",
    "**存在しないkeyのvalueを取得した場合エラーは起きず、",
    "`undefined`を値として得ることができます。**  ",
    "また存在しないkeyにアクセスして値を代入すると、",
    "Objectに新しいkeyが追加されます。  ",
    "```javascript:object_example2.js",
    "var obj = {a: 1, b: 2}; // {a: 1, b: 2}",
    "console.log(obj.c); // undefined",
    "obj.d = -1; // {a: 1, b: 2, d: -1}",
    "```",
    "Objectは参照渡しが行われます。  ",
    "```javascript:object_example3.js",
    "var obj1 = {a: 1}; // {a: 1}",
    "var obj2 = obj1; // {a: 1}",
    "",
    "console.log(obj2); // {a: 1}",
    "obj1.a = -1; // {a: -1}",
    "console.log(obj2); // {a: -1}",
    "```",
    "インデックスのkeyには`'-'`を含めることができますが、",
    "`'-'`を含めた場合のkeyは必ず文字列で宣言しなければなりません。  ",
    "```javascript: object_example4.js",
    "var obj1 = {'a-1': 2}; // {'a-1': 2}",
    "var obj2 = {a-1: 2}; // SyntaxError",
    "",
    "console.log(obj1['a-1']); // 2",
    "console.log(obj1.a-1); // NaN (undefined - 1)",
    "```",
    "ObjectのプロパティについてはAPIを参照してください。  ",
    "",
    "## Array  ",
    "Arrayは`[1, 2, 3]`のような形で表現された、",
    "Javascriptにおけるリストに対応します。  ",
    "要素へのアクセスはObjectとは異なり、",
    "インデックスによるアクセスしかできません。  ",
    "存在しないインデックスにアクセスした場合Objectと同様に、",
    "`undefined`を値として得ることができます。  ",
    "存在しないインデックスに代入した場合、",
    "そのインデックスに要素が追加されてしまいます。",
    "(やめましょう)  ",
    "Arrayの要素数は`length`プロパティを、",
    "要素の末尾への追加は`push(x)`プロパティを用いることで実現できます。  ",
    "```javascript:array_example.js",
    "var arr = [1, 2, 3]; // [1, 2, 3]",
    "",
    "console.log(arr[0]); // 1",
    "console.log(arr.0); // SyntaxError",
    "console.log(arr[3]); // undefined",
    "",
    "arr[4] = 5;",
    "console.log(arr); // [1, 2, 3, <1 empty item>, 5]",
    "console.log(arr[3]); // undefined",
    "console.log(arr[4]); // 5",
    "",
    "var arr2 = [1]; // [1]",
    "arr2.push(0); // [1, 0]",
    "console.log(arr2.length); // 2",
    "```",
    "その他のArrayのプロパティについてはAPIを参照してください。  ",
    "",
    "## function",
    "Javascriptでは関数も変数の一種として扱います。  ",
    "関数の宣言は無名関数を変数に代入することによって行います。  ",
    "関数の引数の数は宣言と呼び出し時に一致している必要はなく、",
    "呼び出し時に不足した引数には`undefined`が代入されます。  ",
    "関数の戻り値は`return`で指定できます。  ",
    "`return`が存在しない場合は`undefined`が戻り値となります。  ",
    "```javascript:function_example1.js",
    "var func1 = function(arg) {",
    "  console,log(arg);",
    "};",
    "",
    "func1(9); // 9",
    "func1('str'); // 'str'",
    "func1(); // undefined",
    "func1(1, 3); // 1",
    "",
    "var func2 = function(arg) {",
    "  return arg;",
    "};",
    "console.log(func2(3)); // 3",
    "console.log(func1(3)); // undefined",
    "```",
    "functionがObjectのプロパティである場合、",
    "そのfunction内ではObject自身を",
    "`this`というObjectとしてアクセスすることができます。  ",
    "ただしこの`this` Objectは、functionがObjectのプロパティではない場合、",
    "global Objectが代入されます。  ",
    "したがってObjectのプロパティであるfunction `f1`内でfunction変数`f2`を",
    "定義すると、",
    "**`f2`における`this`は`f1`における`this`と一致しません**。  ",
    "この問題は`f1`内で`this`を代入した変数を参照することで解決できます。  ",
    "es5以降のJavascriptではfunction",
    "`bind(this)`を用いることでも解決できます。  ",
    "```javascript:function_example2.js",
    "var obj1 = {",
    "  a: 1,",
    "  f: function(x) {",
    "    var g = function() {",
    "      var y = this.a; // undefined",
    "      return y + x; // NaN",
    "    };",
    "",
    "    return g(); // NaN",
    "  },",
    "};",
    "",
    "var obj2 = {",
    "  a: 1,",
    "  f: function(x) {",
    "    var that = this;",
    "",
    "    var g = function() {",
    "      var y = that.a; // 1",
    "      return y + x; // x + 1",
    "    };",
    "",
    "    return g(); // x + 1",
    "  },",
    "};",
    "",
    "var obj3 = {",
    "  a: 1,",
    "  f: function(x) {",
    "    var g = function() {",
    "      var y = this.a;",
    "      return y + x;",
    "    };",
    "",
    "    g = g.bind(this); // make 'this' of g equals to f's'",
    "",
    "    return g(); // x + 1",
    "  },",
    "};",
    "",
    "```",
    "functionのその他のプロパティについてはAPIを参照してください。  ",
    "",
    "## null",
    "nullはプリミティブ型の1つです。  ",
    "興味がある方はAPIを参照してください。  ",
    "",
    "## undefined",
    "undefinedは`undefined`という値からなる、",
    "値が未定義であることを表す値の型です。  ",
    "値が代入されていない変数の値はすべてこの`undefined`になります。  ",
    "",
    "# まとめ",
    "* 真偽値は`true`, `false`",
    "* 文字列は`'`, `\"`どちらでも可",
    "* 数字型は8Byte浮動少数",
    "* Object(辞書型配列)は`obj.a`でアクセス",
    "* Array(リスト)は`list[i]`でアクセス",
    "* functionも変数として扱う",
    "* 関数内での`this`の指すものに注意 (直観と異なる)",
    "* 未定義の変数/パラメータは`undefined`の値をとる",
    "## next",
    "次節ではJavascriptでの変数の宣言について紹介します。 "
  ],
  "title": "Javascriptの変数の種類"
}
